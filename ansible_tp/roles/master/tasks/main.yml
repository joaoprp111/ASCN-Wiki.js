---

- name: Initialize the Kubernetes cluster using kubeadm
  command: kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address="{{ master_ip }}"

# - name: Create a directory for the Kubernetes cluster
#   command: "{{ item }}"
#   with_items:
#     - mkdir -p $HOME/.kube
#     - cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
#     - chown $(id -u):$(id -g) $HOME/.kube/config

- name: Create a directory for the Kubernetes cluster
  file:
    path: '{{ home }}/.kube'
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: '0755'
    state: directory
    recurse: yes

- name: Copy admin.conf to .kube/config
  copy:
    remote_src: yes
    src: /etc/kubernetes/admin.conf
    dest: '{{ home }}/.kube/config'
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: '0644'

- name: Give config file permissions to the user
  file:
    path: '{{ home }}/.kube/config'
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: '0644'

- name: Remove port
  lineinfile:
    path: /etc/kubernetes/manifests/kube-scheduler.yaml
    # String to Search
    regexp: "- --port=0" 
    # State is set to Absent to remove if the Searching Line is found
    state: absent

- name: Restart kubelet service
  command: systemctl restart kubelet.service

- name: Change interface name in flannel yaml
  lineinfile:
    path: kube-flannel.yaml
    # String to Search
    regexp: '^        - --iface=eth1 #TODO: need to change this to your interface$' 
    line: '        - --iface=ens4 #TODO: need to change this to your interface'
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: '0644'

- name: Deploy flannel network
  become: yes
  become_user: "{{ user }}"
  command: kubectl apply -f kube-flannel.yaml

- name: Generate kube join command
  become: yes
  become_user: "{{ user }}"
  command: kubeadm token create --print-join-command
  register: join_command

- name: Copy join command to local file
  become: yes
  become_user: "{{ user }}"
  local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

# - name: Copy templates to other vms
#   become: yes
#   become_user: "{{ user }}"
#   local_action: copy content="../templates/{{ item }}" dest="{{ home }}/{{ item }}"
#   loop: "{{ ymls }}"

- name: Apply PV and PVC resources for PostgresSQL
  become: yes
  become_user: "{{ user }}"
  command: kubectl apply -f postgres-pv.yml

- name: Apply PostgresSQL deployment
  become: yes
  become_user: "{{ user }}"
  command: kubectl apply -f postgres-deployment.yml

- name: Apply wikijs LoadBalancer deployment
  become: yes
  become_user: "{{ user }}"
  command: kubectl apply -f wikijs-deployment.yml

- name: Download Elasticsearch
  get_url:
    url: https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.16.2-linux-x86_64.tar.gz
    dest: "{{ home }}"

- name: Unpack Elasticsearch
  unarchive:
    src: '{{ home }}/elasticsearch-7.16.2-linux-x86_64.tar.gz'
    dest: "{{ home }}"
    remote_src: yes

- name: Configure Elasticsearch 1
  replace:
    path: '{{ home }}/elasticsearch-7.16.2/config/elasticsearch.yml'
    regexp: '#network.host: 192.168.0.1'
    replace: 'network.host: {{ master_ip }}'

- name: Configure Elasticsearch 2
  replace:
    path: '{{ home }}/elasticsearch-7.16.2/config/elasticsearch.yml'
    regexp: '#discovery.seed_hosts: \["host1", "host2"\]'
    replace: 'discovery.seed_hosts: []'

- name: Configure Elasticsearch 3
  replace:
    path: '{{ home }}/elasticsearch-7.16.2/config/elasticsearch.yml'
    regexp: '#cluster.initial_master_nodes: \["node\-1", "node\-2"\]'
    replace: 'cluster.initial_master_nodes: ["{{ master_ip }}"]'
    


- name: Install Java
  apt:
          name: "{{ item }}"
          force_apt_get: yes
          install_recommends: yes
          state: latest
  loop: "{{ java_packages }}"

- name: Set JAVA_HOME
  lineinfile:
    dest: /etc/environment
    state: present
    regexp: '^JAVA_HOME'
    line: 'JAVA_HOME=/usr/'

- name: Recursively change ownership of elasticsearch directory
  file:
    path: elasticsearch-7.16.2/
    state: directory
    recurse: yes
    owner: "{{ user }}"
    group: "{{ user }}"

- name: Increase VM map count
  shell: sysctl -w vm.max_map_count=262144

# - name: Run Elasticsearch
#   shell: cd /tmp/www; nohup  bash elasticsearch </dev/null >/dev/null 2>&1 &
#   args:
#     chdir: '{{ home }}/elasticsearch-7.16.2/bin/'

# - name: Run elasticsearch
#   become: yes
#   become_user: "{{ user }}"
#   shell: ./bin/elasticsearch &
#   args:
#     chdir: '{{ home }}/elasticsearch-7.16.2/bin/'

- name: Download Kibana
  get_url:
    url: https://artifacts.elastic.co/downloads/kibana/kibana-7.16.2-linux-x86_64.tar.gz
    dest: "{{ home }}"

- name: Unpack Kibana
  unarchive:
    src: '{{ home }}/kibana-7.16.2-linux-x86_64.tar.gz'
    dest: "{{ home }}"
    remote_src: yes

- name: Recursively change ownership of kibana directory
  file:
    path: kibana-7.16.2-linux-x86_64/
    state: directory
    recurse: yes
    owner: "{{ user }}"
    group: "{{ user }}"

- name: Configure Kibana 1
  replace:
    path: '{{ home }}/kibana-7.16.2-linux-x86_64/config/kibana.yml'
    regexp: '#server.host: "localhost"'
    replace: 'server.host: "{{ master_ip }}"'

- name: Configure Kibana 2
  replace:
    path: '{{ home }}/kibana-7.16.2-linux-x86_64/config/kibana.yml'
    regexp: '#elasticsearch.hosts: \["http:\/\/localhost:9200"\]'
    replace: 'elasticsearch.hosts: ["http://{{ master_ip }}:9200"]'

# - name: Run Kibana
#   become: yes
#   shell: cd /tmp/www; nohup  bash kibana --allow-root </dev/null >/dev/null 2>&1 &
#   args:
#     chdir: '{{ home }}/kibana-7.16.2-linux-x86_64/bin/'

# - name: Run Kibana
#   become: yes
#   become_user: "{{ user }}"
#   shell: ./bin/kibana &
#   args:
#     chdir: '{{ home }}/kibana-7.16.2-linux-x86_64/bin/'

  


